color = "red", size = 4)
qplot(1:1000, baseData) +
geom_segment(aes(x = 0, xend = 200, y = 0, yend = 0),
color = "red", size = 1)
qplot(1:1000, baseData) +
geom_segment(aes(x = 0, xend = 200, y = 0, yend = 0),
color = "red", size = 1) +
geom_segment(aes(x = 201, xend = 500, y = 0.4, yend = 0.4), color = "red") +
geom_segment(aes(x = 501, xend = 600, y = -0.6, yend = -0.6), color = "red") +
geom_segment(aes(x = 601, xend = 1000, y = 0, yend = 0), color = "red")
qplot(1:1000, baseData) +
geom_segment(aes(x = 0, xend = 200, y = 0, yend = 0),
color = "red", size = 1) +
geom_segment(aes(x = 201, xend = 500, y = 0.4, yend = 0.4),
color = "red", size = 1) +
geom_segment(aes(x = 501, xend = 600, y = -0.6, yend = -0.6),
color = "red", size = 1) +
geom_segment(aes(x = 601, xend = 1000, y = 0, yend = 0),
color = "red", size = 1)
setwd("~/GitHub/Stan-Norm-Hom-Test/snht/vignettes/")
knitr::knit2pdf("snht.Rnw")
knitr::knit2pdf("snht.Rnw")
knitr::knit2pdf("snht.Rnw")
knitr::knit2pdf("snht.Rnw")
qplot(1:1000, baseData) +
geom_segment(aes(x = 0, xend = 200, y = 0, yend = 0),
color = "red", size = 1) +
geom_segment(aes(x = 201, xend = 500, y = 0.4, yend = 0.4),
color = "red", size = 1) +
geom_segment(aes(x = 501, xend = 600, y = -0.6, yend = -0.6),
color = "red", size = 1) +
geom_segment(aes(x = 601, xend = 1000, y = 0, yend = 0),
color = "red", size = 1)
suppressWarnings(library(ggplot2))
qplot(1:1000, baseData) +
geom_segment(aes(x = 0, xend = 200, y = 0, yend = 0),
color = "red", size = 1) +
geom_segment(aes(x = 201, xend = 500, y = 0.4, yend = 0.4),
color = "red", size = 1) +
geom_segment(aes(x = 501, xend = 600, y = -0.6, yend = -0.6),
color = "red", size = 1) +
geom_segment(aes(x = 601, xend = 1000, y = 0, yend = 0),
color = "red", size = 1) +
labs(x = "Time", y = "Data")
library(snht)
args(snht)
snht(data = baseData, period = 30)
snhtStatistic = snht(data = baseData, period = 30)
snhtStatistic
summary(snhtStatistic)
library(snht)
snhtStatistic = snht(data = baseData, period = 30)
summary(snhtStatistic)
summary(snhtStatistic)
snhtStatistic30 = snht(data = baseData, period = 30)
summary(snhtStatistic30)
snhtStatistic60 = snht(data = baseData, period = 60)
summary(snhtStatistic60)
p1 = qplot(1:1000, baseData) +
geom_segment(aes(x = 0, xend = 200, y = 0, yend = 0),
color = "red", size = 1) +
geom_segment(aes(x = 201, xend = 500, y = 0.4, yend = 0.4),
color = "red", size = 1) +
geom_segment(aes(x = 501, xend = 600, y = -0.6, yend = -0.6),
color = "red", size = 1) +
geom_segment(aes(x = 601, xend = 1000, y = 0, yend = 0),
color = "red", size = 1) +
labs(x = "Time", y = "Data")
p1
p1
library(arrangeGrobs)
library(grid.arrange)
library(grid.extra)
library(gridExtra)
rm(snhtStatistic)
snhtStatistic30
head(snhtStatistic30)
p2 = qplot(1:1000, snhtStatistic30$score)
p2
p3 = qplot(1:1000, snhtStatistic30$score, geom = "line")
p3
p2 = qplot(1:1000, snhtStatistic30$score, geom = "line")
p3 = qplot(1:1000, snhtStatistic60$score, geom = "line")
arrangeGrob(p1, p2, p3)
print(arrangeGrob(p1, p2, p3))
dchisq(0.95, df = 2)
dchisq(0.05, df = 2)
pchisq(0.05, df = 2)
pchisq(0.95, df = 2)
pchisq(1, df = 2)
dchisq(1, df = 2)
fchisq(1, df = 2)
?dchisq
qchisq(1, df = 2)
qchisq(0.95, df = 2)
library(gridExtra)
p2 = qplot(1:1000, snhtStatistic30$score, geom = "line") +
geom_hline(yintercept = qchisq(0.95, df = 2), linetype = 2, color = "blue")
p3 = qplot(1:1000, snhtStatistic60$score, geom = "line") +
geom_hline(yintercept = qchisq(0.95, df = 2), linetype = 2, color = "blue")
print(arrangeGrob(p1, p2, p3))
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha), linetype = 4,
color = paste0(100 - 100*alpha, "% confidence threshold"))
pStat = qplot(x = time, y = stat)
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha), linetype = 4,
color = paste0(100 - 100*alpha, "% confidence threshold"))
pStat
alpha = .05
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha), linetype = 4,
color = paste0(100 - 100*alpha, "% confidence threshold"))
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha, df = 2), linetype = 4,
color = paste0(100 - 100*alpha, "% confidence threshold"))
pStat
alpha
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha, df = 2), linetype = 4,
aes(color = paste0(100 - 100*alpha, "% confidence threshold")))
pStat
stat = snhtStatistic30
pStat = qplot(x = time, y = stat$score)
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha, df = 2), linetype = 4,
aes(color = paste0(100 - 100*alpha, "% confidence threshold")))
pStat
time
time = 1:length(data)
data
data = baseData
pData = qplot(x = time, y = data)
pStat = qplot(x = time, y = stat$score)
time = 1:length(data)
pData
pStat
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha, df = 2), linetype = 4,
aes(color = paste0(100 - 100*alpha, "% confidence threshold")))
pStat
pData = qplot(x = time, y = data)
pStat = qplot(x = time, y = stat$score)
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha, df = 2),
linetype = 4, color = "blue")
pStat
pData = qplot(x = time, y = data)
pStat = qplot(x = time, y = stat$score, geom = "line")
if(!is.null(alpha))
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha, df = 2),
linetype = 4, color = "blue")
pStat
pData = qplot(x = time, y = data)
pStat = qplot(x = time, y = stat$score, geom = "line")
if(!is.null(alpha))
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha, df = 2),
linetype = 4, aes(color = "blue"))
pStat
pData = qplot(x = time, y = data)
pStat = qplot(x = time, y = stat$score, geom = "line")
if(!is.null(alpha))
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha, df = 2),
linetype = 4, color = "blue")
stat$score
which.max(stat$score)
time[which.max(stat$score)]
pStat = pStat + geom_vline(xintercept = time[which.max(stat$score)],
color = "red", linetype = 4)
pData = pData + geom_vline(xintercept = time[which.max(stat$score)],
color = "red", linetype = 4)
print(arrangeGrob(pData, pStat))
stopifnot(is(stat, "data.frame"))
stopifnot(is.numeric(data))
stopifnot("score" %in% colnames(data))
colnames(score)
colnames(stat)
stopifnot("score" %in% colnames(stat))
stopifnot(is.numeric(alpha))
stopifnot(is.numeric(data))
stopifnot(is(stat, "data.frame"))
stopifnot("score" %in% colnames(stat))
if(!is.null(alpha))
stopifnot(is.numeric(alpha))
snht
robustSNHTunequal
snht
?snht
plotSNHT = function(data, stat, time = NULL, alpha = NULL){
## Data Quality Checks
stopifnot(is.numeric(data))
stopifnot(is(stat, "data.frame"))
stopifnot("score" %in% colnames(stat))
if(!is.null(alpha))
stopifnot(is.numeric(alpha))
if(is.null(time)){
time = 1:length(data)
stat$time = time
stopifnot(nrow(stat) != length(data))
} else {
stopifnot("time" %in% colnames(stat))
}
pData = qplot(x = time, y = data)
pStat = qplot(x = stat$time, y = stat$score, geom = "line")
if(!is.null(alpha))
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha, df = 2),
linetype = 4, color = "blue")
pStat = pStat + geom_vline(xintercept = stat$time[which.max(stat$score)],
color = "red", linetype = 4)
pData = pData + geom_vline(xintercept = stat$time[which.max(stat$score)],
color = "red", linetype = 4)
print(arrangeGrob(pData, pStat))
}
data
stat
plotSNHT(data, stat)
nrow(stat)
length(data)
source('~/.active-rstudio-document')
plotSNHT(data, stat)
plotSNHT(data, stat, alpha = .05)
grid.extra::arrangeGrob
gridExtra::arrangeGrob
source('~/GitHub/Stan-Norm-Hom-Test/snht/R/plotSNHT.R')
plotSNHT(data, stat, alpha = .05)
library("ggplot2", lib.loc="C:/Program_Files/R/R-3.1.0/library")
detach("package:ggplot2", unload=TRUE)
library("gridExtra", lib.loc="C:/Program_Files/R/R-3.1.0/library")
detach("package:gridExtra", unload=TRUE)
plotSNHT(data, stat, alpha = .05)
source('~/GitHub/Stan-Norm-Hom-Test/snht/R/plotSNHT.R')
pStat
source('~/GitHub/Stan-Norm-Hom-Test/snht/R/plotSNHT.R')
library("ggplot2", lib.loc="C:/Program_Files/R/R-3.1.0/library")
plotSNHT(baseData, snhtStatistic30, alpha = .05)
stat = snhtStatistic30
data = baseData
alpha = .05
plotSNHT(data = baseData, stat = snhtStatistic30, alpha = .05)
time
time = NULL
stopifnot(is.numeric(data))
stopifnot(is(stat, "data.frame"))
stopifnot("score" %in% colnames(stat))
if(!is.null(alpha))
stopifnot(is.numeric(alpha))
if(is.null(time)){
time = 1:length(data)
stat$time = time
stopifnot(nrow(stat) == length(data))
} else {
stopifnot("time" %in% colnames(stat))
}
pData = qplot(x = time, y = data)
pData
pStat = qplot(x = stat$time, y = stat$score, geom = "line")
pStat
if(!is.null(alpha))
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha, df = 2),
linetype = 4, color = "blue")
pStat = pStat + geom_vline(xintercept = stat$time[which.max(stat$score)],
color = "red", linetype = 4)
pData = pData + geom_vline(xintercept = stat$time[which.max(stat$score)],
color = "red", linetype = 4)
print(gridExtra::arrangeGrob(pData, pStat))
pData
pStat
arrangeGrob(pData, pStat)
gridExtra::arrangeGrob(pData, pStat)
print(gridExtra::arrangeGrob(pData, pStat))
library(gridExtra)
print(gridExtra::arrangeGrob(pData, pStat))
pData = qplot(x = time, y = data)
pStat = qplot(x = stat$time, y = stat$score, geom = "line") +
labs(x = "time", y = "SNHT Statistic")
if(!is.null(alpha))
pStat = pStat + geom_hline(yintercept = qchisq(1-alpha, df = 2),
linetype = 4, color = "blue")
pStat = pStat + geom_vline(xintercept = stat$time[which.max(stat$score)],
color = "red", linetype = 4)
pData = pData + geom_vline(xintercept = stat$time[which.max(stat$score)],
color = "red", linetype = 4)
print(gridExtra::arrangeGrob(pData, pStat))
source('~/GitHub/Stan-Norm-Hom-Test/snht/R/plotSNHT.R')
plotSNHT(data = baseData, stat = snhtStatistic30, alpha = .05)
plotSNHT(data = baseData, stat = snhtStatistic30, alpha = .05)
snhtStatistic30
largestStatTime = which.max(snhtStatistic30$score)
largestStatTime
snhtStatistic30[largestStatTime, ]
round(snhtStatistic30[largestStatTime, "rightMean"], 3)
round(snhtStatistic30[largestStatTime, "leftMean"], 3)
round(snhtStatistic30[largestStatTime, "rightMean"], 3) - round(snhtStatistic30[largestStatTime, "leftMean"], 3)
x = rnorm(10000)
snht(x, period = 50)
stat = snht(x, period = 50)
qplot(stat$score)
grid = seq(0, 20, .01)
grid
geom_line(grid, dchisq(grid))
qplot(stat$score) +
geom_line(grid, dchisq(grid))
qplot(stat$score) +
geom_line(grid, dchisq(grid, df = 1))
dchisq(grid, df = 1)
qplot(stat$score) +
geom_line(grid, dchisq(grid, df = 1))
grid
qplot(stat$score) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1)))
qplot(stat$score, wt = 1/10000) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1)))
qplot(stat$score, weightt = 1/10000) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1)))
qplot(stat$score, weight = 1/10000) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1)))
qplot(stat$score, weight = 1/10000) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1))) +
coord_cartesian(ylim = c(0, 1))
qplot(stat$score, weight = 1/10000, binwidth = .01) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1))) +
coord_cartesian(ylim = c(0, 1))
qplot(stat$score, freq = TRUE, binwidth = .01) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1))) +
coord_cartesian(ylim = c(0, 1))
qplot(stat$score, freq = TRUE, binwidth = .1) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1))) +
coord_cartesian(ylim = c(0, 1))
qplot(stat$score, freq = FALSE, binwidth = .1) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1))) +
coord_cartesian(ylim = c(0, 1))
qplot(stat$score, freq = FALSE, binwidth = .1) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1)))
qplot(stat$score, freq = TRUE, binwidth = .1) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1))) +
coord_cartesian(ylim = c(0, 1))
qplot(stat$score, freq = TRUE, binwidth = .1) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1)))
qplot(stat$score, weight = .1/10000, binwidth = .1) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1))) +
coord_cartesian(ylim = c(0, 1))
qplot(stat$score, weight = 1/(10000*.1), binwidth = .1) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1))) +
coord_cartesian(ylim = c(0, 1))
qplot(stat$score, weight = 1/(10000*.1), binwidth = .1) +
geom_line(aes(x = grid, y = dchisq(grid, df = 1))) +
coord_cartesian(ylim = c(0, 2))
largestStatTime = which.max(snhtStatistic30$score)
snhtStatistic30[largestStatTime, ]
plotSNHT(data = baseData, stat = snhtStatistic30)
plotSNHT(data = baseData, stat = snhtStatistic60)
plotSNHT(data = baseData, stat = snhtStatistic30, alpha = 0.05)
plotSNHT(data = baseData, stat = snhtStatistic60, alpha = 0.05)
plotSNHT(data = baseData, stat = snhtStatistic30, alpha = 0.05)
baseData
cos(1:50 * 2 * pi / 50)
seasonalData = baseData + cos(1:50 * 2 * pi / 50)
qplot(1:1000, seasonalData)
seasonalData = baseData + cos(1:100 * 2 * pi / 100)
qplot(1:1000, seasonalData)
seasonalData = baseData + cos(1:200 * 2 * pi / 200)
qplot(1:1000, seasonalData)
rbinom(1000, p = .1)
seasonalData = seasonalData +
rbinom(1000, p = .1, size = 1) * rnorm(1000, sd = 10)
qplot(1:1000, seasonalData)
qplot(1:1000, seasonalData) + labs(x = "Time", y = "Seasonal Data")
snhtStatistic30 = snht(data = seasonalData, period = 30)
plotSNHT(data = seasonalData, stat = snhtStatistic30)
largestStatTime = which.max(snhtStatistic60$score)
largestStatTime
snhtStatistic60[largestStatTime, ]
snhtStatistic = snht(data = seasonalData, period = 60)
plotSNHT(data = seasonalData, stat = snhtStatistic60)
plotSNHT(data = seasonalData, stat = snhtStatistic)
snhtStatistic = snht(data = seasonalData, period = 60, robust = TRUE,
rmSeasonalPeriod = 200)
plotSNHT(data = seasonalData, stat = snhtStatistic)
snhtStatistic = snht(data = seasonalData, period = 60)
plotSNHT(data = seasonalData, stat = snhtStatistic)
snhtStatistic = snht(data = seasonalData, period = 100)
plotSNHT(data = seasonalData, stat = snhtStatistic)
snhtStatistic = snht(data = seasonalData, period = 100, robust = TRUE,
rmSeasonalPeriod = 200)
plotSNHT(data = seasonalData, stat = snhtStatistic)
snhtStatistic = snht(data = seasonalData, period = 200)
plotSNHT(data = seasonalData, stat = snhtStatistic)
snhtStatistic = snht(data = seasonalData, period = 200, robust = TRUE,
rmSeasonalPeriod = 200)
plotSNHT(data = seasonalData, stat = snhtStatistic)
snhtStatistic = snht(data = seasonalData, period = 200)
plotSNHT(data = seasonalData, stat = snhtStatistic)
snhtStatistic = snht(data = seasonalData, period = 200, robust = TRUE,
rmSeasonalPeriod = 200)
plotSNHT(data = seasonalData, stat = snhtStatistic)
snhtStatistic = snht(data = seasonalData, period = 200)
plotSNHT(data = seasonalData, stat = snhtStatistic)
snhtStatistic = snht(data = seasonalData, period = 200, robust = TRUE,
rmSeasonalPeriod = 200)
plotSNHT(data = seasonalData, stat = snhtStatistic)
source('~/GitHub/Stan-Norm-Hom-Test/snht/R/plotSNHT.R')
baseData
times = 1:1000 + rnorm(1000, sd = 3)
times = sort(times)
times
qplot(times, baseData)
qplot(diff(times))
qplot(times, baseData)
qplot(times, baseData)
times = 1:1000 + rnorm(1000, sd = 10)
times = sort(times)
qplot(times, baseData)
times = 1:1000 + rnorm(1000, sd = 3)
times = sort(times)
snht(data = baseData, period = 60, time = times)
snhtStatistic = snht(data = baseData, period = 60, time = times)
summary(snhtStatistic)
plotSNHT(data = baseData, stat = snhtStatistic)
stop("The snht statistic wasn't computed on evenly spaced data. ",
"Please supply the times to this plotting function.")
source('~/GitHub/Stan-Norm-Hom-Test/snht/R/plotSNHT.R')
plotSNHT(data = baseData, stat = snhtStatistic)
plotSNHT(data = baseData, stat = snhtStatistic, time = times)
times
source('~/GitHub/Stan-Norm-Hom-Test/snht/R/plotSNHT.R')
plotSNHT(data = baseData, stat = snhtStatistic, time = times)
getwd()
knitr::knit2pdf("snht.Rnw")
library(knitr)
opts_chunk$set(fig.path = 'figure/', fig.align = 'center', fig.show = 'hold',
warning = FALSE, message = FALSE, error = FALSE, tidy = FALSE,
results = 'markup', eval = TRUE, echo = TRUE, cache = FALSE)
options(replace.assign = TRUE, width = 80)
assign("depthtrigger", 80, data.table:::.global)
set.seed(123)
baseData = rnorm(1000)
baseData[201:500] = baseData[201:500] + .4
baseData[501:600] = baseData[501:600] - .6
suppressWarnings(library(ggplot2))
p1 = qplot(1:1000, baseData) +
geom_segment(aes(x = 0, xend = 200, y = 0, yend = 0),
color = "red", size = 1) +
geom_segment(aes(x = 201, xend = 500, y = 0.4, yend = 0.4),
color = "red", size = 1) +
geom_segment(aes(x = 501, xend = 600, y = -0.6, yend = -0.6),
color = "red", size = 1) +
geom_segment(aes(x = 601, xend = 1000, y = 0, yend = 0),
color = "red", size = 1) +
labs(x = "Time", y = "Data")
p1
library(snht)
snhtStatistic30 = snht(data = baseData, period = 30)
summary(snhtStatistic30)
snhtStatistic60 = snht(data = baseData, period = 60)
summary(snhtStatistic60)
plotSNHT(data = baseData, stat = snhtStatistic30, alpha = .05)
library(snht)
snhtStatistic30 = snht(data = baseData, period = 30)
summary(snhtStatistic30)
snhtStatistic60 = snht(data = baseData, period = 60)
summary(snhtStatistic60)
plotSNHT(data = baseData, stat = snhtStatistic30, alpha = .05)
snhtStatistic30
"time" %in% colnames(stat)
stat
rm(stat)
rm(time)
rm(alpha)
rm(data)
plotSNHT(data = baseData, stat = snhtStatistic30, alpha = .05)
snhtStatistic30
colnames(snhtStatistic30)
data =
baseData
stat = snhtStatistic30
alpha = .05
time = NULL
alpha = NULL
stopifnot(is.numeric(data))
stopifnot(is(stat, "data.frame"))
stopifnot("score" %in% colnames(stat))
if(!is.null(alpha))
stopifnot(is.numeric(alpha))
is.null(time)
time = 1:length(data)
time
stat$time = time
stopifnot(nrow(stat) == length(data))
"time" %in% colnames(stat)
colnames(stat)
stat
source('~/GitHub/Stan-Norm-Hom-Test/snht/R/plotSNHT.R')
plotSNHT(data = baseData, stat = snhtStatistic30, alpha = .05)
largestStatTime = which.max(snhtStatistic60$score)
snhtStatistic60[largestStatTime, ]
plotSNHT(data = baseData, stat = snhtStatistic30, alpha = 0.05)
plotSNHT(data = baseData, stat = snhtStatistic60, alpha = 0.05)
seasonalData = baseData + cos(1:200 * 2 * pi / 200)
seasonalData = seasonalData +
rbinom(1000, p = .1, size = 1) * rnorm(1000, sd = 10)
qplot(1:1000, seasonalData) + labs(x = "Time", y = "Seasonal Data")
snhtStatistic = snht(data = seasonalData, period = 200)
plotSNHT(data = seasonalData, stat = snhtStatistic)
snhtStatistic = snht(data = seasonalData, period = 200, robust = TRUE,
rmSeasonalPeriod = 200)
plotSNHT(data = seasonalData, stat = snhtStatistic)
times = 1:1000 + rnorm(1000, sd = 3)
times = sort(times)
snhtStatistic = snht(data = baseData, period = 60, time = times)
summary(snhtStatistic)
plotSNHT(data = baseData, stat = snhtStatistic, time = times)
knitr::knit2pdf("snht.Rnw")
getwd()
devtools::document("../../snht")
devtools::document("../../snht")
devtools::document("../../snht")
?devtools::build
devtools::build("../../snht")
devtools::check("../../snht")
devtools::check("../../snht_1.0.1.tar.gz")
